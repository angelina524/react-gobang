{"version":3,"sources":["Gobang/components/Squares.js","Gobang/components/Board.js","Gobang/index.js","index.js"],"names":["Square","styled","button","Chess","div","props","color","Squares","x","y","blackIsNext","handleChessClick","winner","useState","setColor","onClick","current","Title","BoardWrapper","PlayerStatus","StatusDesc","Restart","BoardStatus","BoardRow","Board","Array","fill","board","setBoard","setWinner","useRef","currentX","currentY","map","row","col","countChess","directionX","directionY","totalChess","findX","findY","useEffect","calculateWinner","window","location","reload","Gobang","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.536a6ed8.chunk.js","sourcesContent":["import styled from 'styled-components'\nimport { useState } from 'react'\n\nconst Square = styled.button`\n  background: #FFFFFF;\n  border: 1px solid #000000;\n  float: left;\n  font-size: 24px;\n  font-weight: bold;\n  line-height: 34px;\n  height: 30px;\n  margin-right: -1px;\n  margin-top: -1px;\n  padding: 0;\n  text-align: center;\n  width: 30px;\n\n  &:focus {\n    outline: none;\n  }\n`\n\nconst Chess = styled.div`\n  box-sizing: border-box;\n  z-index: 1;\n  width: 100%;\n  height: 100%;\n  transform: scale(0.95);\n  border-radius: 50%;\n\n  ${(props) => props.color === 'black' && `\n    background : black;\n    border: 1px solid black;\n  `}\n  ${(props) => props.color === 'white' && `\n    background : white;\n    border: 1px solid black;\n  `}\n`\n\nconst Squares = ({ x, y, blackIsNext, handleChessClick, winner }) => {\n\n  const [color, setColor] = useState(null)\n\n  function handleClick() {\n    if (color) return\n    if (winner) return\n    blackIsNext.current ? setColor('white') : setColor('black')\n    blackIsNext.current = !blackIsNext.current\n    handleChessClick(x, y)\n  }\n\n  return (\n    <Square onClick={handleClick}>\n      <Chess color={color} />\n    </Square>\n  )\n}\n\nexport default Squares;\n","import { useState, useRef, useEffect } from 'react'\nimport styled from 'styled-components'\nimport Squares from './Squares'\n\nconst Title = styled.div`\n  margin-top: 40px;\n  border-bottom: 2px solid black;\n  border-top: 2px solid black;\n  padding: 15px;\n  text-align: center;\n  font-size: 28px;\n  font-weight: bold;\n`\n\nconst BoardWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  padding: 40px;\n`\n\nconst PlayerStatus = styled.div`\n  width: 100%;\n  max-width: 200px;\n  margin-top: 80px;\n  margin-right: 100px;\n  padding: 0 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nconst StatusDesc = styled.div`\n  padding: 20px;\n`\n\nconst Restart = styled.button`\n  width: 100%;\n  padding: 5px 20px;\n  background: none;\n  border: 1px solid black;\n  cursor: pointer;\n  transition: .25s;\n\n  &:hover {\n    background: grey;\n    color: white;\n  }\n`\n\nconst BoardStatus = styled.div`\n  padding: 4px;\n  border: 3px solid grey;\n`\n\nconst BoardRow = styled.div`\n  &:after {\n    clear: both;\n    content: \"\";\n    display: table;\n\n  }\n`\n\nconst Board = () => {\n  const [board, setBoard] = useState(Array(19).fill(Array(19).fill(null)))\n  const [winner, setWinner] = useState(null)\n  const blackIsNext = useRef(false)\n  const currentX = useRef()\n  const currentY = useRef()\n\n  function handleChessClick(x, y) {\n    currentX.current = x\n    currentY.current = y\n    changeBoard()\n  }\n\n  function changeBoard() {\n    setBoard(board => {\n      return board.map((row, y) => {\n        if (y !== currentY.current) return row\n        return row.map((col, x) => {\n          if (x !== currentX.current) return col\n          return x = blackIsNext.current ? 'black' : 'white'\n        })\n      })\n    })\n  }\n\n  useEffect(() => {\n    if (!currentX.current && !currentY.current) return\n    calculateWinner(board, currentX.current, currentY.current)\n\n    function calculateWinner(board, x, y) {\n      if (\n        countChess(board, x, y, -1, 0) + countChess(board, x, y, 1, 0) >= 4 ||\n        countChess(board, x, y, 0, -1) + countChess(board, x, y, 0, 1) >= 4 ||\n        countChess(board, x, y, 1, 1) + countChess(board, x, y, -1, -1) >= 4 ||\n        countChess(board, x, y, -1, 1) + countChess(board, x, y, 1, -1) >= 4\n      ) {\n        return setWinner(board[y][x])\n      }\n    }\n  }, [board])\n\n  function countChess(board, x, y, directionX, directionY) {\n    let totalChess = 0\n    let findX = x + directionX\n    let findY = y + directionY\n\n    while (board[findY] && board[findY][findX] === board[y][x]) {\n      findX = findX + directionX\n      findY = findY + directionY\n      totalChess++\n    }\n    return totalChess\n  }\n\n  function handleRestartClick() {\n    window.location.reload()\n  }\n\n  return (\n    <>\n      <Title>Gobang</Title>\n      <BoardWrapper>\n        <PlayerStatus>\n          {\n            (winner && <StatusDesc>Winner : {winner}</StatusDesc>) ||\n            (!winner && <StatusDesc>Next Player : {blackIsNext.current ? 'black' : 'white'}</StatusDesc>)\n          }\n          <Restart onClick={handleRestartClick}>Restart</Restart>\n        </PlayerStatus>\n        <BoardStatus>\n          {board.map((row, y) => {\n            return (\n              <BoardRow key={y}>\n                {row.map((col, x) => {\n                  return <Squares key={x} x={x} y={y} blackIsNext={blackIsNext} handleChessClick={handleChessClick} winner={winner} />\n                })}\n              </BoardRow>\n            )\n          })}\n        </BoardStatus>\n      </BoardWrapper>\n    </>\n  )\n}\n\nexport default Board;\n","import Board from './components/Board'\n\nconst Gobang = () => {\n  return (\n    <Board />\n  )\n}\n\nexport default Gobang;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Gobang from './Gobang';\n\nReactDOM.render(\n  <Gobang />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}